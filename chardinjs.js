// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  (function($, window) {
    var chardinJs;
    chardinJs = (function() {
      chardinJs.prototype.settings = {
        opacity: 0.8,
        disableZIndex: false,
        closeBoxMessage: 'Got it!',
        closeBoxCorner: 'SE',
        iframeSelector: null
      };

      function chardinJs(el, options) {
        this._call_function_on_chardin_elements = __bind(this._call_function_on_chardin_elements, this);
        this._show_element = __bind(this._show_element, this);
        this._position_helper_layer = __bind(this._position_helper_layer, this);
        this.settings = $.extend(this.settings, options);
        this.$el = $(el).first();
        $(window).resize((function(_this) {
          return function() {
            return _this.refresh();
          };
        })(this));
      }

      chardinJs.prototype.start = function() {
        var close_box;
        if (this._overlay_visible()) {
          return false;
        }
        this._add_overlay_layer();
        this._call_function_on_chardin_elements(this._show_element);
        if (this.settings.closeBoxMessage) {
          close_box = $("<div class=\"chardinjs-closebox chardinjs-closebox-" + (this.settings.closeBoxCorner.toLowerCase()) + "\">" + this.settings.closeBoxMessage + "</div>");
          close_box.click((function(_this) {
            return function() {
              return _this.stop();
            };
          })(this));
          this.$el.append(close_box);
        }
        return this.$el.trigger('chardinJs:start');
      };

      chardinJs.prototype.toggle = function() {
        if (this._overlay_visible()) {
          return this.stop();
        } else {
          return this.start();
        }
      };

      chardinJs.prototype.refresh = function() {
        if (this._overlay_visible()) {
          return this._call_function_on_chardin_elements(this._position_helper_layer);
        } else {
          return this;
        }
      };

      chardinJs.prototype.stop = function() {
        this.$el.find('.chardinjs-overlay').fadeOut(function() {
          return $(this).remove();
        });
        this.$el.find('.chardinjs-helper-layer').remove();
        this.$el.find('.chardinjs-closebox').remove();
        this.$el.find('.chardinjs-show-element').removeClass('chardinjs-show-element');
        this.$el.find('.chardinjs-relative-position').removeClass('chardinjs-relative-position');
        if (window.removeEventListener) {
          window.removeEventListener('keydown', this._onKeyDown, true);
        } else {
          if (document.detachEvent) {
            document.detachEvent('onkeydown', this._onKeyDown);
          }
        }
        return this.$el.trigger('chardinJs:stop');
      };

      chardinJs.prototype._overlay_visible = function() {
        return this.$el.find('.chardinjs-overlay').length;
      };

      chardinJs.prototype._add_overlay_layer = function() {
        var element_position, overlay_layer;
        if (this._overlay_visible()) {
          return false;
        }
        overlay_layer = $('<div class="chardinjs-overlay" />');
        if (this.$el.is('body')) {
          overlay_layer.css('top', 0).css('bottom', 0).css('left', 0).css('right', 0).css('position', 'fixed');
        } else {
          element_position = this._get_offset(this.$el);
          overlay_layer.width(element_position.width).height(element_position.height).css('top', "" + element_position.top + "px").css('left', "" + element_position.left + "px");
        }
        this.$el.append(overlay_layer);
        overlay_layer.click((function(_this) {
          return function() {
            return _this.stop();
          };
        })(this));
        return setTimeout((function(_this) {
          return function() {
            var percentage_opacity;
            percentage_opacity = Math.round(100 * _this.settings.opacity);
            return overlay_layer.css('opacity', _this.settings.opacity).css('-ms-filter', "progid:DXImageTransform.Microsoft.Alpha(Opacity=" + percentage_opacity + ")").css('filter', "alpha(opacity=" + percentage_opacity + ")");
          };
        })(this), 10);
      };

      chardinJs.prototype._get_position = function(element) {
        return element.attr('data-position') || 'bottom';
      };

      chardinJs.prototype._place_tooltip = function(element) {
        var my_height, my_width, target_element_position, target_height, target_width, tooltip_layer, tooltip_layer_position;
        tooltip_layer = element.data('tooltip_layer');
        tooltip_layer_position = this._get_offset(tooltip_layer);
        tooltip_layer.css('top', '');
        tooltip_layer.css('right', '');
        tooltip_layer.css('bottom', '');
        tooltip_layer.css('left', '');
        switch (this._get_position(element)) {
          case 'top':
          case 'bottom':
            target_element_position = this._get_offset(element);
            target_width = target_element_position.width;
            my_width = tooltip_layer.width();
            tooltip_layer.css('left', "" + ((target_width / 2) - (tooltip_layer_position.width / 2)) + "px");
            break;
          case 'left':
          case 'right':
            target_element_position = this._get_offset(element);
            target_height = target_element_position.height;
            my_height = tooltip_layer.height();
            tooltip_layer.css('top', "" + ((target_height / 2) - (tooltip_layer_position.height / 2)) + "px");
        }
        switch (this._get_position(element)) {
          case 'left':
            return tooltip_layer.css('left', "-" + (tooltip_layer_position.width - 34) + "px");
          case 'right':
            return tooltip_layer.css('right', "-" + (tooltip_layer_position.width - 34) + "px");
          case 'bottom':
            return tooltip_layer.css('bottom', "-" + tooltip_layer_position.height + "px");
          case 'top':
            return tooltip_layer.css('top', "-" + tooltip_layer_position.height + "px");
        }
      };

      chardinJs.prototype._position_helper_layer = function(element, yOffset) {
        var element_position, helper_layer;
        if (yOffset == null) {
          yOffset = 0;
        }
        helper_layer = element.data('helper_layer');
        element_position = this._get_offset(element, yOffset);
        return helper_layer.width(element_position.width).height(element_position.height).css('top', "" + (Math.round(element_position.top)) + "px").css('left', "" + (Math.round(element_position.left)) + "px");
      };

      chardinJs.prototype._show_element = function(element, yOffset) {
        var current_element_position, element_position, helper_layer, tooltip_layer;
        if (yOffset == null) {
          yOffset = 0;
        }
        element_position = this._get_offset(element, yOffset);
        tooltip_layer = $("<div class=\"chardinjs-tooltip chardinjs-" + (this._get_position(element)) + "\"><div class=\"chardinjs-tooltiptext\">" + (element.attr('data-intro')) + "</div></div>");
        helper_layer = $("<div class=\"chardinjs-helper-layer chardinjs-" + (this._get_position(element)) + "\" />");
        if (element.id) {
          helper_layer.data('id', element.id);
        }
        helper_layer.append(tooltip_layer);
        element.data('helper_layer', helper_layer).data('tooltip_layer', tooltip_layer);
        this._position_helper_layer(element, yOffset);
        this.$el.append(helper_layer);
        this._place_tooltip(element);
        if (!this.settings.disableZIndex) {
          element.addClass('chardinjs-show-element');
        }
        current_element_position = element.css('position').toLowerCase();
        if (current_element_position !== 'absolute' && current_element_position !== 'relative') {
          return element.addClass('chardinjs-relative-position');
        }
      };

      chardinJs.prototype._get_offset = function(element, yOffset) {
        if (yOffset == null) {
          yOffset = 0;
        }
        return {
          left: element.offset().left,
          top: element.offset().top + yOffset,
          width: element.outerWidth(),
          height: element.outerHeight()
        };
      };

      chardinJs.prototype._call_function_on_chardin_elements = function(fn) {
        var el, iframe, _i, _j, _len, _len1, _ref, _ref1, _results;
        _ref = this.$el.find('*[data-intro]');
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          el = _ref[_i];
          if ($(el).is(':visible')) {
            fn($(el));
          }
        }
        if (this.settings.iframeSelector) {
          _ref1 = this.$el.find(this.settings.iframeSelector);
          _results = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            iframe = _ref1[_j];
            _results.push((function() {
              var _k, _len2, _ref2, _results1;
              _ref2 = $(iframe.contentWindow.document || iframe.contentDocument).find('*[data-intro]');
              _results1 = [];
              for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
                el = _ref2[_k];
                if ($(el).is(':visible')) {
                  _results1.push(fn($(el), $(iframe).offset().top));
                } else {
                  _results1.push(void 0);
                }
              }
              return _results1;
            })());
          }
          return _results;
        }
      };

      return chardinJs;

    })();
    return $.fn.extend({
      chardinJs: function(command, options) {
        var $this, data;
        if (options == null) {
          options = {};
        }
        $this = $(this[0]);
        data = $this.data('chardinJs');
        if (!data) {
          $this.data('chardinJs', (data = new chardinJs(this, options)));
        }
        if (typeof command === 'string') {
          data[command].apply(data);
        }
        return data;
      }
    });
  })(window.jQuery, window);

}).call(this);
